{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Nelua",
	"scopeName": "source.nelua",
	"patterns": [
		{
			"begin": "\\b(?:(local)\\s+)?(function)\\s*(?:\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:([\\.:])[a-zA-Z_][a-zA-Z0-9_]*)?)\\s*)?(\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.local.nelua"
				},
				"2": {
					"name": "keyword.control.nelua"
				},
				"3": {
					"name": "entity.name.function.nelua"
				},
				"4": {
					"name": "punctuation.separator.parameter.nelua"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.nelua"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.nelua"
				}
			},
			"name": "meta.function.nelua",
			"patterns": [
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "variable.parameter.function.nelua"
				},
				{
					"match": ",",
					"name": "punctuation.separator.arguments.nelua"
				}
			]
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
			"name": "constant.numeric.integer.hexadecimal.nelua"
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
			"name": "constant.numeric.float.hexadecimal.nelua"
		},
		{
			"match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
			"name": "constant.numeric.integer.nelua"
		},
		{
			"match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
			"name": "constant.numeric.float.nelua"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.nelua"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.nelua"
				}
			},
			"name": "string.quoted.single.nelua",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.nelua"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.nelua"
				}
			},
			"name": "string.quoted.double.nelua",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "##(\\[(=*)\\[)",
			"beginCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.nelua"
				},
				"1": {
					"name": "punctuation.definition.string.begin.nelua"
				}
			},
			"contentName": "meta.embedded.nelua",
			"end": "(\\]\\2\\])",
			"endCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.nelua"
				},
				"1": {
					"name": "punctuation.definition.string.end.nelua"
				}
			},
			"patterns": [
				{
					"include": "source.nelua"
				}
			]
		},
		{
			"begin": "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
			"beginCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.nelua"
				},
				"1": {
					"name": "punctuation.definition.string.begin.nelua"
				}
			},
			"contentName": "meta.embedded.nelua",
			"end": "(\\]\\2\\])",
			"endCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.nelua"
				},
				"1": {
					"name": "punctuation.definition.string.end.nelua"
				}
			},
			"patterns": [
				{
					"include": "source.c"
				}
			]
		},
		{
			"begin": "(?<!--)\\[(=*)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.nelua"
				}
			},
			"end": "\\]\\1\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.nelua"
				}
			},
			"name": "string.quoted.other.multiline.nelua"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.nelua"
				}
			},
			"match": "\\A(#!).*$\\n?",
			"name": "comment.line.shebang.nelua"
		},
		{
			"begin": "(^[ \\t]+)?(?=--)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.nelua"
				}
			},
			"end": "(?!\\G)((?!^)[ \\t]+\\n)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.trailing.nelua"
				}
			},
			"patterns": [
				{
					"begin": "--\\[(=*)\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.nelua"
						}
					},
					"end": "\\]\\1\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.nelua"
						}
					},
					"name": "comment.block.nelua"
				},
				{
					"begin": "--",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.nelua"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-dash.nelua"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.goto.nelua"
				},
				"2": {
					"name": "constant.other.placeholder.nelua"
				}
			},
			"match": "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.label.begin.nelua"
				},
				"2": {
					"name": "punctuation.definition.label.end.nelua"
				}
			},
			"match": "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)",
			"name": "constant.other.placeholder.nelua"
		},
		{
			"match": "\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|function|local|in|switch|case|continue|defer|global)\\b",
			"name": "keyword.control.nelua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(false|nil|nilptr|true|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)",
			"name": "constant.language.nelua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(self)\\b",
			"name": "variable.language.self.nelua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall|integer|boolean)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.nelua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.library.nelua"
		},
		{
			"match": "\\b(and|or|not)\\b",
			"name": "keyword.operator.nelua"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.any-method.nelua"
		},
		{
			"match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)",
			"name": "variable.other.nelua"
		},
		{
			"match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
			"name": "keyword.operator.nelua"
		},
		{
			"match": "(\\b|:)(char|uchar|boolean|byte)\\b",
			"captures": {
				"2": {"name": "support.type.byte"}
			}
		},
		{
			"match": "(\\b|:)(integer|uinteger|uint|uint8|int16|uint16|int32|uint32|int64|uint64|int128|uint128)\\b",
			"captures": {
				"2": {"name": "support.type.int"}
			}
		},
		{
			"match": "(\\b|:)(isize|usize)\\b",
			"captures": {
				"2": {"name": "support.type.size"}
			}
		},
		{
			"match": "(\\b|:)(float32|float64|float128|number)\\b",
			"captures": {
				"2": {"name": "support.type.float"}
			}
		},
		{
			"match": "(\\b|:)(pointer|type|typetype|void|auto|string)\\b",
			"captures": {
				"2": {"name": "support.type.other"}
			}
		}
	],
	"repository": {
		"escaped_char": {
			"patterns": [
				{
					"match": "\\\\[abfnrtvz\\\\\"'\\n]",
					"name": "constant.character.escape.nelua"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.byte.nelua"
				},
				{
					"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
					"name": "constant.character.escape.byte.nelua"
				},
				{
					"match": "\\\\u\\{[0-9A-Fa-f]+\\}",
					"name": "constant.character.escape.unicode.nelua"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.character.escape.nelua"
				}
			]
		}
	}
}